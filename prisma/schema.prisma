generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model User {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  email       String        @unique
  password    String      
  department String
  course      String
  photo       Bytes
  assessments Assessment[]  // 1 to n - Um usuário pode possuir muitas avaliações
  comments    Comment[]     // 1 to n - Um usuário pode possuir muitos comentários
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
}

model Assessment {
  id           Int           @id @default(autoincrement())
  content      String
  teacher      Teacher       @relation(fields: [teacherId], references: [id]) 
  teacherId    Int
  user         User          @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade )   // Cada avaliacao pertence a um único usuario
  userId       Int
  comments     Comment[]     // 1 to n - Uma avaliação pode possuir muitos comentários
  subject      Subject       @relation(fields: [subjectId], references: [id]) // Cada avaliacao pertence a uma única disciplina 
  subjectId    Int
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
}

model Comment {
  id           Int           @id @default(autoincrement())
  content      String
  userId       Int
  user         User          @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade) // Um comentario pertence a um unico usuario
  assessmentId Int
  assessment   Assessment    @relation(fields: [assessmentId], references: [id]) // Um comentario pertence a uma unica avaliação
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
}

model Subject {
  id          Int                    @id @default(autoincrement())
  name        String
  assessments Assessment[]          // 1 to n - Uma disciplina pode possuir muitas avaliações
  teachersSubjects TeacherSubject[]               // n to n - Uma disciplina pode possuir muitos professores
  created_at  DateTime              @default(now())
  updated_at  DateTime              @updatedAt 
}

// Definir TeacherSubject para definir a relação n to n onde um professor possui muitas disciplinas
// e uma disciplina possui muitos professores

model Teacher {
  id           Int                  @id @default(autoincrement())
  name         String               @unique
  department   String
  photo        Bytes
  assessments  Assessment[]         // 1 to n - Um professor pode possuir muitas avaliações
  teacherSubjects TeacherSubject[]            // n to n - Um professor pode possuir muitas disciplinas
  created_at   DateTime             @default(now())
  updated_at   DateTime             @updatedAt
}

model TeacherSubject {
  teacherId    Int
  subjectId    Int
  teacher      Teacher   @relation(fields: [teacherId], references: [id])
  subject      Subject   @relation(fields: [subjectId], references: [id])
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@id([teacherId, subjectId])
}
